global_array	a_global	size	4000	initial	
global_int	num_global	initial	0

divide_global:
mov	0		#0
mov	low		#2
mov	1000		#1
mul	#0	#0	#1
add	#0	#0	#2
mov	4		#1
mul	#0	#0	#1
mov_arr	a	#0	#0
local_int	temp	stack_offset	8

divide_global_for_cond_a:
mov	low		#1
mov	high		#2
sne	#1	#2	#3
ifFalse	#3	goto	divide_global_for_end_a

divide_global_for_cond_b:
mov	low		#1
mov	high		#2
slt	#1	#2	#3
mov	#10		#1
ifFalse	#10	goto	divide_global_shortcircuit_c
mov	0		#2
mov	high		#5
mov	1000		#4
mul	#2	#2	#4
add	#2	#2	#5
mov	4		#4
mul	#2	#2	#4
mov_arr	a	#2	#2
mov	temp		#4
sge	#2	#4	#5
mov	#12		#1

divide_global_shortcircuit_c:
ifFalse	#1	goto	divide_global_for_end_b
mov	high		#1
inc	#1		#1
mov	#1		high

divide_global_for_incr_b:
jmp	divide_global_for_cond_b

divide_global_for_end_b:
mov	low		#0
mov	high		#1
slt	#0	#1	#2
ifFalse	#2	goto	divide_global_endif_d
mov	0		#0
mov	high		#2
mov	1000		#1
mul	#0	#0	#1
add	#0	#0	#2
mov	4		#1
mul	#0	#0	#1
mov_arr	a	#0	#0
mov	0		#1
mov	low		#3
mov	1000		#2
mul	#1	#1	#2
add	#1	#1	#3
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	a	
mov	low		#0
inc	#0		#0
mov	#0		low

divide_global_endif_d:

divide_global_for_cond_e:
mov	low		#0
mov	high		#1
slt	#0	#1	#2
mov	#10		#0
ifFalse	#10	goto	divide_global_shortcircuit_f
mov	0		#1
mov	low		#4
mov	1000		#3
mul	#1	#1	#3
add	#1	#1	#4
mov	4		#3
mul	#1	#1	#3
mov_arr	a	#1	#1
mov	temp		#3
sle	#1	#3	#4
mov	#12		#0

divide_global_shortcircuit_f:
ifFalse	#0	goto	divide_global_for_end_e
mov	low		#0
inc	#0		#0
mov	#0		low

divide_global_for_incr_e:
jmp	divide_global_for_cond_e

divide_global_for_end_e:
mov	low		#0
mov	high		#1
slt	#0	#1	#2
ifFalse	#2	goto	divide_global_endif_g
mov	0		#0
mov	low		#2
mov	1000		#1
mul	#0	#0	#1
add	#0	#0	#2
mov	4		#1
mul	#0	#0	#1
mov_arr	a	#0	#0
mov	0		#1
mov	high		#3
mov	1000		#2
mul	#1	#1	#2
add	#1	#1	#3
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	a	
mov	high		#0
inc	#0		#0
mov	#0		high

divide_global_endif_g:

divide_global_for_incr_a:
jmp	divide_global_for_cond_a

divide_global_for_end_a:
mov	temp		#0
mov	0		#1
mov	low		#3
mov	1000		#2
mul	#1	#1	#2
add	#1	#1	#3
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	a	
mov	low		#0
return	#0

#divide_global_end:

qsort_global:
local_int	mid	stack_offset	8
mov	low		#0
mov	high		#1
sge	#0	#1	#2
ifFalse	#2	goto	qsort_global_endif_a
mov	0		#0
return	#0

qsort_global_endif_a:
mov	low		#0
mov	high		#1
call	divide_global	
mov	#2		mid
mov	low		#0
mov	mid		#1
mov	1		#2
sub	#1	#2	#3
call	qsort_global	
mov	mid		#0
mov	1		#1
add	#0	#1	#2
mov	high		#0
call	qsort_global	
mov	0		#0
return	#0

#qsort_global_end:

main:
local_int	i	stack_offset	8
read
mov	0		#0
mov	#0		i

main_for_cond_a:
mov	i		#0
mov	num		#1
slt	#0	#1	#2
ifFalse	#2	goto	main_for_end_a
mov	0		#0
mov	i		#2
mov	1000		#1
mul	#0	#0	#1
add	#0	#0	#2
mov	4		#1
mul	#0	#0	#1
read

main_for_incr_a:
mov	i		#0
inc	#0		#0
mov	#0		i
jmp	main_for_cond_a

main_for_end_a:
mov	0		#0
mov	num		#1
mov	1		#2
sub	#1	#2	#3
call	qsort_global	
mov	num		#0
write
mov	0		#0
mov	#0		i

main_for_cond_b:
mov	i		#0
mov	num		#1
slt	#0	#1	#2
ifFalse	#2	goto	main_for_end_b
mov	0		#0
mov	i		#2
mov	1000		#1
mul	#0	#0	#1
add	#0	#0	#2
mov	4		#1
mul	#0	#0	#1
mov_arr	a	#0	#0
write

main_for_incr_b:
mov	i		#0
inc	#0		#0
mov	#0		i
jmp	main_for_cond_b

main_for_end_b:
mov	0		#0
return	#0

#main_end:
